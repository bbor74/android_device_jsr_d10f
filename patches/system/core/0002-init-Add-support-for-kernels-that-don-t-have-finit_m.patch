From eef33d5c2052c64f1ed9395405cdbb39e15a2d64 Mon Sep 17 00:00:00 2001
From: Boris Belyaev <bbor1974@gmail.com>
Date: Thu, 8 Jun 2023 10:42:25 +0400
Subject: [PATCH 2/2] init: Add support for kernels that don't have finit_module
 Some kernels don't have finit_module, which makes booting Android 7.0
 impossible if people can't backport it themselves, so set
 KERNEL_HAS_FINIT_MODULE := false in BoardConfig.mk file to allow booting 7.0
 even when the kernel doesn't have finit_ module :)

Change-Id: I7a5df2f28286e2590693757f59b7388e3b05fbb4
---
 init/Android.mk   |  4 ++++
 init/builtins.cpp | 16 ++++++++++++++++
 2 files changed, 20 insertions(+)

diff --git a/init/Android.mk b/init/Android.mk
index f8d1d22d7..bb079b998 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -56,6 +56,10 @@ LOCAL_SRC_FILES:= \
     watchdogd.cpp \
     vendor_init.cpp
 
+ifeq ($(KERNEL_HAS_FINIT_MODULE), false)
+LOCAL_CFLAGS += -DNO_FINIT_MODULE
+endif
+
 LOCAL_MODULE:= init
 LOCAL_C_INCLUDES += \
     system/core/mkbootimg
diff --git a/init/builtins.cpp b/init/builtins.cpp
index bb1b5eab0..0ae530e48 100644
--- a/init/builtins.cpp
+++ b/init/builtins.cpp
@@ -32,7 +32,9 @@
 #include <sys/resource.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
+#ifndef NO_FINIT_MODULE
 #include <sys/syscall.h>
+#endif
 #include <sys/system_properties.h>
 #include <sys/time.h>
 #include <sys/types.h>
@@ -68,23 +70,37 @@ using namespace std::literals::string_literals;
 
 #define chmod DO_NOT_USE_CHMOD_USE_FCHMODAT_SYMLINK_NOFOLLOW
 
+#ifdef NO_FINIT_MODULE
+// System call provided by bionic but not in any header file.
+extern "C" int init_module(void *, unsigned long, const char *);
+#endif
+
 namespace android {
 namespace init {
 
 static constexpr std::chrono::nanoseconds kCommandRetryTimeout = 5s;
 
 static int insmod(const char *filename, const char *options, int flags) {
+#ifndef NO_FINIT_MODULE
     int fd = open(filename, O_RDONLY | O_NOFOLLOW | O_CLOEXEC);
     if (fd == -1) {
         PLOG(ERROR) << "insmod: open(\"" << filename << "\") failed";
+#else
+    std::string module, err;
+    if (!ReadFile(filename, &module, &err)) {
+#endif
         return -1;
     }
+#ifndef NO_FINIT_MODULE
     int rc = syscall(__NR_finit_module, fd, options, flags);
     if (rc == -1) {
         PLOG(ERROR) << "finit_module for \"" << filename << "\" failed";
     }
     close(fd);
     return rc;
+#else
+    return init_module(&module[0], module.size(), options);
+#endif
 }
 
 static int __ifupdown(const char *interface, int up) {
-- 
2.17.1

